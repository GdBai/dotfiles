" G. Bai's .vimrc

let mapleader = ";" " Change mapleader
let maplocalleader = ";" " Change local mapleader
set nocompatible " Get out of vi compatible mode
let system_name = system('uname') " Reserve for later

" Auto source .vimrc after saving
autocmd BufWritePost $MYVIMRC source $MYVIMRC

set splitbelow splitright " Split new window below and right
set laststatus=2 " Always show status line
set wildmenu " Enable a menu at the bottom with tab-key compeletion
set showtabline=2 " Show tabline
set ruler " Show current cursor position
set nu " Switch on numbering
set encoding=utf-8 " Necessary for Windows to display vim-airline properly
set fileencodings=ucs-bom,utf-8,utf-16,gbk,big5,gb18030,latin1
set hlsearch " Highlight search result
set incsearch " See cursor move when typing
set mouse=a " Enable use of mouse for all modes
set linebreak " Wrap lines at characters in 'breakat'
set display+=lastline " Show last line in the window rather than '@'

" Time out
set ttimeout
set ttimeoutlen=100
set timeoutlen=1000

" Cursor
" Works if $TERM is set to "screen-256color" in ~/.bashrc
if &term =~ "screen-256color"
  let &t_SI .= "\e[5 q" " SI = INSERT mode
	let &t_SR .= "\e[4 q" " SR = REPLACE mode
	let &t_EI .= "\e[1 q" " EI = NORMAL mode (ELSE)
  " To make sure Vim use normal mode cursor when started
  silent !echo -ne "\e[1 q"
  " If shell cursor is not configured in ~/.inputrc
  " Uncomment next line to reset cursor when Vim exits:
  " autocmd VimLeave * silent !echo -ne "\033]112\007"
  " use \003]12;gray\007 for gnome-terminal and rxvt up to version 9.21
endif

" Spell
set spelllang=en_gb,cjk
autocmd FileType tex setlocal spell
let g:tex_comment_nospell = 1 " For vimtex use g:vimtex_syntax_nospell_comments

" Toggle relative numbering
nnoremap <C-n> :set rnu!<CR>

" Color scheme
syntax enable
colorscheme slate
highlight Normal ctermbg=235
highlight StatusLine ctermfg=253
highlight StatusLineNC ctermfg=243
highlight Tabline ctermbg=239
highlight TablineFill ctermfg=243
highlight VertSplit ctermfg=235 ctermbg=243

" Tab
filetype indent on
set expandtab " Always use space instead of tab
autocmd FileType vim setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType sh setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType python setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType tex setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4

" Clipboard
if system_name =~ "Darwin"
  set clipboard=unnamed
  noremap <Leader>y "*y
  noremap <Leader>p "*p
elseif system_name =~ "Linux"
  set clipboard=unnamedplus
  noremap <Leader>y "+y
  noremap <Leader>p "+p
endif

" Paste toggle
nnoremap <C-p> :set invpaste paste?<CR>
set pastetoggle=<C-p>

" Buffer shortcuts
" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
"command! BD bp | bd #
"nnoremap <leader>d :BD<CR>
"nnoremap <leader>d :bp<cr>:bd #<cr>
command! BD bp! | bd! #
nnoremap <leader>D :BD<CR>
" Move to next buffer
"nmap <leader>l :bn<CR>
nmap <leader>L :bn!<CR>
" Move to previous buffer
"nmap <leader>h :bp<CR>
nmap <leader>H :bp!<CR>

" Window shortcuts
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Line number from 0 shortcuts. NE: ein; NA: aus
command! NE set nonumber | %s/^/\=line('.')-1."\t"/ | noh
command! NA %s/^[^\t]*\t// | set number | noh

if system_name =~ "Darwin" && has("python3_dynamic")
  set pythonthreehome=$HOME/.pyenv/versions/3.8.6
  set pythonthreedll=$HOME/.pyenv/versions/3.8.6/lib/libpython3.8.dylib
endif

" Check if memory size is large enough to use plugins
if system_name =~ "Darwin"
  let flag = "good"
elseif system_name =~ "Linux"
  let mem_size = system("free -mt | tail -1 | awk '{print $2}'") " Get memory size in MB
  if mem_size > 3600
    let flag = "good"
  else
    let flag = "nogood"
  endif
endif

" Windows also works
if has('win32')
  let flag = "good"
endif

" Plugin
if flag == "good"
  " vim-plug
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif

  call plug#begin('~/.vim/plugged')
  Plug 'tpope/vim-fugitive'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'nathanaelkane/vim-indent-guides'
  Plug 'morhetz/gruvbox'
  Plug 'scrooloose/nerdtree'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'edkolev/tmuxline.vim' " See tmuxline.vim settings section
  Plug 'lervag/vimtex'
  Plug 'godlygeek/tabular' " tabular plugin must come before vim-markdown
  Plug 'plasticboy/vim-markdown'
  Plug 'JamshedVesuna/vim-markdown-preview'
  Plug 'neoclide/coc.nvim'
  Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets'
  Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
  Plug 'psliwka/vim-smoothie'
  call plug#end()

  " gruvbox
  let g:gruvbox_contrast_dark = 'hard'
  colorscheme gruvbox

  " vim-indent-guides
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_auto_colors = 1
  "autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
  "autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
  let g:indent_guides_start_level = 2
  let g:indent_guides_guide_size = 1
  nmap <silent> <leader>i <Plug>IndentGuidesToggle

  " NERDTree
  let NERDTreeShowHidden = 1
  let NERDTreeMinimalUI = 1
  command! NT NERDTreeToggle | AirlineRefresh
  nmap nt :NT<CR>
  autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  " If more than one window and previous buffer was NERDTree, go back to it.
  autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr('$') > 1 | b# | endif

  " Airline
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1
  " Enable next two lines to define straight tabs
  "let g:airline#extensions#tabline#left_sep = ' '
  "let g:airline#extensions#tabline#left_alt_sep = '|'
  let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

  " tmuxline.vim
  " Run :Tmuxline then :TmuxlineSnapshot! [file]
  " (usually need this '!' to override)
  command! TS Tmuxline | TmuxlineSnapshot! ~/.tmuxline.snapshot
  nmap ts :TS<CR>
  let g:airline#extensions#tmuxline#enabled = 0
  let airline#extensions#tmuxline#snapshot_file = "~/.tmuxline.snapshot"
  let g:tmuxline_preset = {
    \'a'    : '#S',
    \'win'  : '#I #W',
    \'cwin' : '#I #W',
    \'x'    : '%d-%b',
    \'y'    : '%R',
    \'z'    : '#H'}

  " vimtex
  let g:tex_flavor = 'latex'
  let g:vimtex_compiler_latexmk_engines = {'_': '-xelatex'}
  let g:vimtex_view_method = 'skim'
  let g:vimtex_mappings_enabled = 1
  let g:vimtex_syntax_nospell_comments = 1
  let g:vimtex_grammar_vlty = {'lt_command': 'languagetool'}
  let g:vimtex_grammar_vlty.shell_options =
          \   ' --multi-language'
  let g:vimtex_grammar_textidote = {
          \ 'jar': '~/textidote.jar',
          \ 'args': '--check en',
          \}

  " vim-markdown-preview
  let vim_markdown_preview_github = 1 " if using grip
  let vim_markdown_preview_hotkey = '<C-m>'

  " coc.nvim
  " Remap <cr> to make sure it confirms completion when popup menu is visible
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

  " UltiSnips
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsJumpForwardTrigger="<tab>"
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
  let g:UltiSnipsEditSplit="vertical"

  " LeaderF
  let g:Lf_ShortcutF = "<leader>ff"
  let g:Lf_WindowPosition = 'popup'
  let g:Lf_PreviewInPopup = 1
  let g:Lf_ShowDevIcons = 0
endif
