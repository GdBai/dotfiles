" G. Bai's .vimrc

let mapleader = ";"
let maplocalleader = ";"
if has('win32')
  set nocompatible " Get out of vi compatible mode
endif
let system_name = substitute(system('uname'), '\n', '', '') " Reserve for later

" Load local .vimrc files
set exrc
set secure

if !exists("*ReloadConfigs")
  function ReloadConfigs()
    :source ~/.vimrc
    if has('gui_running')
      if !has('gui_vimr')
        :source ~/.gvimrc
      else
        :source ~/.config/nvim/ginit.vim
      endif
    endif
  endfunction
  command! RC call ReloadConfigs()
endif

set splitbelow splitright " Split new window below and right
set laststatus=2 " Always show status line
set wildmenu " Enable a menu at the bottom with tab-key completion
set showtabline=2 " Show tabline
set ruler " Show current cursor position
set nu " Switch on numbering
set encoding=utf-8 " Necessary for Windows to display vim-airline properly
set fileencodings=ucs-bom,utf-8,utf-16,gbk,big5,gb18030,latin1
set hlsearch " Highlight search result
set incsearch " See cursor move when typing
if has('nvim')
  set inccommand=nosplit
endif
set mouse=a " Enable use of mouse for all modes
set ttymouse=sgr " For Alacritty terminfo
set linebreak " Wrap lines at characters in 'breakat'
set display+=lastline " Show last line in the window rather than '@'
set maxmempattern=2000000 " Avoid E363
set autochdir " For Neovim

" Time out
set ttimeout
set ttimeoutlen=100
set timeoutlen=100

" Cursor
if has('nvim')
  set guicursor=n-v-c-sm:block-blinkon100,i-ci-ve:ver25-blinkon100,r-cr-o:hor20-blinkon100
else
  if $TERM_PROGRAM ==# 'iTerm.app'
    let &t_SI = "\<Esc>]50;CursorShape=1;BlinkingCursorEnabled=1\x7"
    let &t_SR = "\<Esc>]50;CursorShape=2;BlinkingCursorEnabled=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0;BlinkingCursorEnabled=1\x7"
    " Initialize cursor shape/color on startup
    augroup reset_iTerm_cursor_shape
    au!
    "autocmd VimEnter * startinsert | stopinsert
    autocmd VimEnter * normal! :startinsert :stopinsert
    "autocmd VimEnter * :normal :startinsert :stopinsert
    autocmd VimEnter * redraw!
    augroup END
  else
    let &t_SI .= "\e[5 q" " SI = INSERT mode
    let &t_SR .= "\e[3 q" " SR = REPLACE mode
    let &t_EI .= "\e[1 q" " EI = NORMAL mode (ELSE)
    " Initialize cursor shape/color on startup
    augroup reset_cursor_shape
    au!
    "autocmd VimEnter * startinsert | stopinsert
    autocmd VimEnter * normal! :startinsert :stopinsert
    "autocmd VimEnter * :normal :startinsert :stopinsert
    autocmd VimEnter * redraw!
    augroup END
    " Reset cursor when Vim exits:
    autocmd VimLeave * silent !echo -ne "\e[5 q"
  endif
endif

" Spell
set spelllang=en_gb
autocmd FileType tex setlocal spell
let g:tex_comment_nospell = 1 " For vimtex use g:vimtex_syntax_nospell_comments

" Toggle relative numbering
nnoremap <C-n> :set rnu!<CR>

" Color scheme
syntax enable
colorscheme slate
highlight Normal ctermbg=235
highlight StatusLine ctermfg=253
highlight StatusLineNC ctermfg=243
highlight Tabline ctermbg=239
highlight TablineFill ctermfg=243
highlight VertSplit ctermfg=235 ctermbg=243

" Prevent wrong bg color during rapid scrolling
if (&term =~ '^xterm' && &t_Co == 256)
  set t_ut= | set ttyscroll=1
endif

" Indentation and tab
filetype indent on
set expandtab " Always use space instead of tab
autocmd FileType vim setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType sh setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType python setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType tex setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2

" Clipboard
if system_name ==# "Darwin"
  set clipboard=unnamed
  noremap <Leader>y "*y
  noremap <Leader>p "*p
elseif system_name ==# "Linux"
  set clipboard=unnamedplus
  noremap <Leader>y "+y
  noremap <Leader>p "+p
endif

" Paste toggle
nnoremap <C-p> :set invpaste paste?<CR>
set pastetoggle=<C-p>

" Buffer
" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nnoremap <leader>bd :bp! \| bd #<CR>
" A function to skip QuickFix buffer
function! BSkipQuickFix(command)
  let start_buffer = bufnr('%')
  execute a:command
  while &buftype ==# 'quickfix' && bufnr('%') != start_buffer
    execute a:command
  endwhile
endfunction
" Move to next buffer
nnoremap <leader>bn :call BSkipQuickFix("bn!")<CR>
" Move to previous buffer
nnoremap <leader>bp :call BSkipQuickFix("bp!")<CR>

" Window shortcuts
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

au FileType qf call AdjustWindowHeight(3, 10)
function! AdjustWindowHeight(minheight, maxheight)
  exe max([min([line("$"), a:maxheight]), a:minheight]) . "wincmd _"
endfunction

" Line number from 0 shortcuts. NE: ein; NA: aus
command! NE set nonumber | %s/^/\=line('.')-1."\t"/ | noh
command! NA %s/^[^\t]*\t// | set number | noh

if system_name ==# "Darwin"
  if has('nvim')
    let g:python3_host_prog = '$HOME/.pyenv/versions/py3nvim/bin/python'
  elseif has('python3_dynamic')
    set pythonthreehome=$HOME/.pyenv/versions/3.8.6
    set pythonthreedll=$HOME/.pyenv/versions/3.8.6/lib/libpython3.8.dylib
  endif
endif

" Check if memory size is large enough to use plugins
if system_name ==# "Darwin"
  let flag = "good"
elseif system_name ==# "Linux"
  let mem_size = system("free -mt | tail -1 | awk '{print $2}'") " Get memory size in MB
  if mem_size > 3600
    let flag = "good"
  else
    let flag = "nogood"
  endif
endif

" Windows also works
if has('win32')
  let flag = "good"
endif

if flag == "nogood"
  " Auto source .vimrc after saving
  autocmd BufWritePost $MYVIMRC source $MYVIMRC
elseif flag == "good"
  " Auto source .vimrc after saving
  autocmd BufWritePost $MYVIMRC source $MYVIMRC | call airline#extensions#tabline#buffers#invalidate() | AirlineRefresh

  " vim-plug
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif

  " vim-plug conditional activation
  function! Cond(cond, ...)
    let opts = get(a:000, 0, {})
    return a:cond ? opts : extend(opts, {'on': [], 'for': []})
  endfunction

  call plug#begin('~/.vim/plugged')
  Plug 'tpope/vim-fugitive'
  Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
  Plug 'nathanaelkane/vim-indent-guides'
  Plug 'morhetz/gruvbox'
  Plug 'cormacrelf/vim-colors-github'
  Plug 'preservim/nerdtree'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'edkolev/tmuxline.vim' " See tmuxline.vim settings section
  Plug 'lervag/vimtex'
  Plug 'godlygeek/tabular' " tabular plugin must come before vim-markdown
  Plug 'plasticboy/vim-markdown' | Plug 'JamshedVesuna/vim-markdown-preview'
  Plug 'neoclide/coc.nvim', Cond(has('nvim'))
  Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
  Plug 'Yggdroot/LeaderF', {'do': ':LeaderfInstallCExtension'}
  Plug 'psliwka/vim-smoothie'
  Plug 'skywind3000/Leaderf-snippet'
  Plug 'mhinz/vim-startify'
  Plug 'nvim-lua/popup.nvim', Cond(has('nvim'))
  Plug 'nvim-lua/plenary.nvim', Cond(has('nvim'))
  Plug 'nvim-telescope/telescope.nvim', Cond(has('nvim'))
  call plug#end()

  " gruvbox
  let g:gruvbox_contrast_dark = 'hard'
  colorscheme gruvbox

  " IndentGuides(): Set Indent Guides color
  function! IndentGuides(background)
    if a:background == "dark"
      hi IndentGuidesOdd  guibg=#a9a9a9 ctermbg=darkgrey
      hi IndentGuidesEven guibg=#808080 ctermbg=grey
    elseif a:background == "light"
      hi IndentGuidesOdd  guibg=#808080 ctermbg=grey
      hi IndentGuidesEven guibg=#a9a9a9 ctermbg=darkgrey
    endif
  endfunction

  " ToggleBackground(): Toggle color scheme
  function! ToggleBackground()
    if &background == "dark"
      set background=light
      colorscheme github
      let g:airline_theme = "github"
      call IndentGuides(&background)
    elseif &background == "light"
      set background=dark
      colorscheme gruvbox
      let g:airline_theme = "gruvbox"
      call IndentGuides(&background)
    endif
    call airline#extensions#tabline#buffers#invalidate()
    AirlineRefresh
    if has('gui_vimr')
      VimRToggleTools
      VimRToggleTools
    endif
  endfunction

  nmap tb :call ToggleBackground()<CR>

  " MacBackground(): Set color scheme for macOS
  function! MacBackground()
    if system("defaults read -g AppleInterfaceStyle") =~ "^Dark"
      set background=dark
      colorscheme gruvbox
      let g:airline_theme = "gruvbox"
      call IndentGuides(&background)
    else
      set background=light
      colorscheme github
      let g:airline_theme = "github"
      call IndentGuides(&background)
    endif
  endfunction

  " MacGUIBackground(): change MacVim gVim color scheme automatically
  function! MacGUIBackground()
    if v:os_appearance == 1
      set background=dark
      colorscheme gruvbox
      let g:airline_theme = "gruvbox"
      call IndentGuides(&background)
    else
      set background=light
      colorscheme github
      let g:airline_theme = "github"
      call IndentGuides(&background)
    endif
    call airline#extensions#tabline#buffers#invalidate()
    AirlineRefresh
  endfunction

  if system_name ==# "Darwin"
    if !has('nvim')
      call MacBackground()
      autocmd OSAppearanceChanged * call MacGUIBackground()
    else
      call MacBackground()
    endif
  endif

  " Indent Guides
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_auto_colors = 0
  if &background == 'dark'
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=darkgrey  ctermbg=darkgrey
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=lightgrey ctermbg=lightgrey
  elseif &background == 'light'
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=lightgrey ctermbg=lightgrey
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=darkgrey  ctermbg=darkgrey
  endif
  let g:indent_guides_start_level = 1
  let g:indent_guides_color_change_percent = 100
  let g:indent_guides_guide_size = 1
  nmap <silent> <leader>i <Plug>IndentGuidesToggle

  " NERDTree
  let NERDTreeShowHidden = 1
  let NERDTreeMinimalUI = 1
  command! NT NERDTreeToggle
  "command! NT NERDTreeToggle | AirlineRefresh
  nmap nt :NT<CR>
  autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  " If more than one window and previous buffer was NERDTree, go back to it.
  autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr('$') > 1 | b# | endif

  " vim-airline
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1
  " Enable next two lines to define straight tabs
  "let g:airline#extensions#tabline#left_sep = ' '
  "let g:airline#extensions#tabline#left_alt_sep = '|'
  let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

  " tmuxline.vim
  " Run :Tmuxline then :TmuxlineSnapshot! [file]
  " (usually need this '!' to override)
  command! TS Tmuxline | TmuxlineSnapshot! ~/.tmuxline.snapshot
  nmap ts :TS<CR>
  let g:airline#extensions#tmuxline#enabled = 0
  let airline#extensions#tmuxline#snapshot_file = "~/.tmuxline.snapshot"
  let g:tmuxline_preset = {
    \'a'    : '#S',
    \'win'  : '#I #W',
    \'cwin' : '#I #W',
    \'x'    : '%d-%b',
    \'y'    : '%R',
    \'z'    : '#H'}

  " VimTeX
  let g:tex_flavor = 'latex'
  let g:vimtex_compiler_latexmk_engines = {'_': '-xelatex'}
  let g:vimtex_view_method = 'skim'
  let g:vimtex_mappings_enabled = 1
  let g:vimtex_syntax_nospell_comments = 1
  let g:vimtex_grammar_vlty = {'lt_command': 'languagetool'}
  let g:vimtex_grammar_vlty.shell_options =
          \   ' --multi-language'
  let g:vimtex_grammar_textidote = {
          \ 'jar': '~/textidote.jar',
          \ 'args': '--check en',
          \}
  let g:airline#extensions#vimtex#main = "/"
  "if has('nvim')
  "  g:vimtex_compiler_progname = 'nvr'
  "endif
  command TexRoot silent exe 'cd' b:vimtex.root
  nmap <leader>l/ :TexRoot<CR>
  command TexReset silent exe ':VimtexStop' | exe ':VimtexClean' | exe '!rm' b:vimtex.root .. '/*.bbl'
  nmap <leader>ld :TexReset<CR>

  " vim-markdown-preview
  let vim_markdown_preview_github = 1 " if using grip
  let vim_markdown_preview_hotkey = '<C-m>'

  " coc.nvim
  " Remap <CR> to make sure it confirms completion when popup menu is visible
  inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
  " Insert separator between whitespace warning and coc warning
  let g:airline_section_warning = '%{airline#util#prepend(airline#extensions#whitespace#check(),0)}%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'

  " UltiSnips
  let g:UltiSnipsExpandTrigger = "<tab>"
  let g:UltiSnipsJumpForwardTrigger = "<tab>"
  let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
  let g:UltiSnipsSnippetStorageDirectoryForUltiSnipsEdit = '~/.vim/Ultisnips' " For Neovim rtp
  "let g:UltiSnipsEditSplit = "vertical"
  let g:UltiSnipsEnableSnipMate = 0

  " LeaderF
  let g:Lf_ShortcutF = "<leader>ff"
  let g:Lf_ShortcutB = "<leader>fb"
  let g:Lf_WindowPosition = 'popup'
  let g:Lf_PreviewInPopup = 1
  let g:Lf_StlSeparator = {'left': "\ue0b0", 'right': "\ue0b2"}
  let g:Lf_ShowDevIcons = 0

  " LeaderF-snippet
  inoremap <C-s> <C-\><C-o>:Leaderf snippet<CR>
  let g:Lf_PreviewResult = get(g:, 'Lf_PreviewResult', {})
  let g:Lf_PreviewResult.snippet = 1
endif
