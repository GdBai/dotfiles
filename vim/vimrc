" G. Bai's .vimrc

let mapleader = ";" " Change mapleader
set nocompatible " Get out of vi compatible mode
let system_name = system('uname')

" Auto source .vimrc after saving
autocmd BufWritePost $MYVIMRC source $MYVIMRC

set splitbelow splitright " Split new window below and right
set laststatus=2 " Always show status line
set wildmenu " Enable a menu at the bottom with tab-key compeletion
set showtabline=2 " Show tabline
set ruler " Show current cursor position
set nu rnu " Switch on relative numbering
set encoding=utf-8 " Necessary for Windows to display vim-airline properly
set fileencodings=ucs-bom,utf-8,utf-16,gbk,big5,gb18030,latin1
set hlsearch " Highlight search result
set mouse=a " Enable use of mouse for all modes

" Toggle relative numbering
nnoremap <C-n> :set rnu!<CR>

" Color scheme
syntax enable
colorscheme slate
highlight Normal ctermbg=235
highlight StatusLine ctermfg=253
highlight StatusLineNC ctermfg=243
highlight Tabline ctermbg=239
highlight TablineFill ctermfg=243
highlight VertSplit ctermfg=235 ctermbg=243

" Tab
filetype indent on
set expandtab " Always use space instead of tab
autocmd FileType vim setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType sh setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType python setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType tex setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4

" Clipboard
if system_name =~ "Darwin"
  set clipboard=unnamed
  noremap <Leader>y "*y
  noremap <Leader>p "*p
elseif system_name =~ "Linux"
  set clipboard=unnamedplus
  noremap <Leader>y "+y
  noremap <Leader>p "+p
endif

" Paste toggle
nnoremap <C-p> :set invpaste paste?<CR>
set pastetoggle=<C-p>

" Buffer shortcuts
" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
command! BD bp | bd #
nnoremap <leader>d :BD<CR>
"nnoremap <leader>d :bp<cr>:bd #<cr>
command! BDD bp! | bd! #
nnoremap <leader>D :BDD<CR>
" Move to next buffer
nmap <leader>l :bn<CR>
nmap <leader>L :bn!<CR>
" Move to previous buffer
nmap <leader>h :bp<CR>
nmap <leader>H :bp!<CR>

" Window shortcuts
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Line number from 0 shortcuts. NE: ein; NA: aus
command! NE set nonumber | %s/^/\=line('.')-1."\t"/ | noh
command! NA %s/^[^\t]*\t// | set number | noh

" Check if memory size is large enough to use plugins
if system_name =~ "Darwin"
  let flag = "good"
elseif system_name =~ "Linux"
  let mem_size = system("free -mt | tail -1 | awk '{print $2}'") " Get memory size in MB
  if mem_size > 3600
    let flag = "good"
  else
    let flag = "nogood"
  endif
endif

" Windows also works
if has('win32')
  let flag = "good"
endif

" Plugin
if flag == "good"
  " Vundle

  filetype off " required

  " set the runtime path to include Vundle and initialize
  set rtp+=~/.vim/bundle/Vundle.vim
  call vundle#begin()
  " alternatively, pass a path where Vundle should install plugins
  "call vundle#begin('~/some/path/here')

  " let Vundle manage Vundle, required
  Plugin 'VundleVim/Vundle.vim'

  " The following are examples of different formats supported.
  " Keep Plugin commands between vundle#begin/end.
  " plugin on GitHub repo
  Plugin 'tpope/vim-fugitive'
  " plugin from http://vim-scripts.org/vim/scripts.html
  " Plugin 'L9'
  " Git plugin not hosted on GitHub
  "Plugin 'git://git.wincent.com/command-t.git'
  " git repos on your local machine (i.e. when working on your own plugin)
  " Plugin 'file:///home/gmarik/path/to/plugin'
  " The sparkup vim script is in a subdirectory of this repo called vim.
  " Pass the path to set the runtimepath properly.
  "Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
  " Install L9 and avoid a Naming conflict if you've already installed a
  " different version somewhere else.
  " Plugin 'ascenator/L9', {'name': 'newL9'}
  Plugin 'vim-airline/vim-airline'
  Plugin 'vim-airline/vim-airline-themes'
  Plugin 'nathanaelkane/vim-indent-guides'
  Plugin 'morhetz/gruvbox'
  Plugin 'scrooloose/nerdtree'
  Plugin 'Xuyuanp/nerdtree-git-plugin'
  Plugin 'edkolev/tmuxline.vim' " See tmuxline.vim settings section
  Plugin 'lervag/vimtex'
  " tabular plugin must come before vim-markdown
  Plugin 'godlygeek/tabular'
  Plugin 'plasticboy/vim-markdown'
  Plugin 'JamshedVesuna/vim-markdown-preview'
  Plugin 'neoclide/coc.nvim'
  " All of your Plugins must be added before the following line
  call vundle#end()            " required
  filetype plugin indent on    " required
  " To ignore plugin indent changes, instead use:
  "filetype plugin on
  "
  " Brief help
  " :PluginList       - lists configured plugins
  " :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
  " :PluginSearch foo - searches for foo; append `!` to refresh local cache
  " :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
  "
  " see :h vundle for more details or wiki for FAQ
  " Put your non-Plugin stuff after this line

  " gruvbox
  let g:gruvbox_contrast_dark = 'hard'
  colorscheme gruvbox

  " vim-indent-guides
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_auto_colors = 1
  "autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
  "autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
  let g:indent_guides_start_level = 2
  let g:indent_guides_guide_size = 1
  nmap <silent> <leader>i <Plug>IndentGuidesToggle

  " NERDTree
  let NERDTreeShowHidden = 1
  let NERDTreeMinimalUI = 1
  command! NT NERDTreeToggle | AirlineRefresh
  nmap nt :NT<CR>
  autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  " If more than one window and previous buffer was NERDTree, go back to it.
  autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr('$') > 1 | b# | endif

  " Airline
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1
  " Enable next two lines to define straight tabs
  "let g:airline#extensions#tabline#left_sep = ' '
  "let g:airline#extensions#tabline#left_alt_sep = '|'
  let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

  " tmuxline.vim
  " Run :Tmuxline then :TmuxlineSnapshot! [file]
  " (usually need this '!' to override)
  command! TS Tmuxline | TmuxlineSnapshot! ~/.tmuxline.snapshot
  nmap ts :TS<CR>
  let g:airline#extensions#tmuxline#enabled = 0
  let airline#extensions#tmuxline#snapshot_file = "~/.tmuxline.snapshot"
  let g:tmuxline_preset = {
    \'a'    : '#S',
    \'win'  : '#I #W',
    \'cwin' : '#I #W',
    \'x'    : '%d-%b',
    \'y'    : '%R',
    \'z'    : '#H'}

  " vimtex
  let g:tex_flavor = 'latex'
  let g:vimtex_compiler_latexmk_engines = {'_': '-xelatex'}
  let g:vimtex_view_method = 'skim'

  " vim-markdown-preview
  let vim_markdown_preview_github = 1 " if using grip
  let vim_markdown_preview_hotkey = '<C-m>'
endif
