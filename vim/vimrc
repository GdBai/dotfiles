" G. Bai's .vimrc

let mapleader = " "
let maplocalleader = " "

if has('nvim')
  lua vim.g["system_name"] = vim.loop.os_uname().sysname
else
  if has('win32')
    let g:system_name = "Windows_NT"
  elseif has('macunix')
    let g:system_name = "Darwin"
  else
    let g:system_name = "Linux"
  endif
endif

if g:system_name ==# "Windows_NT"
  set nocompatible " Get out of vi compatible mode
endif

" Load local .vimrc files
set exrc
set secure

if !exists("*ReloadConfigs")
  function ReloadConfigs()
    :source ~/.vimrc
    if has('gui_running')
      if !has('gui_vimr')
        :source ~/.gvimrc
      else
        :source ~/.config/nvim/ginit.vim
      endif
    endif
  endfunction
  command! RC call ReloadConfigs()
endif

" Check if memory size is large enough to use plugins
if g:system_name ==# "Darwin"
  let g:flag = "good"
elseif g:system_name ==# "Linux"
  let mem_size = system("free -mt | tail -1 | awk '{print $2}'") " Get memory size in MB
  if mem_size > 3600
    let g:flag = "good"
  else
    let g:flag = "nogood"
  endif
endif

" Windows also works
if g:system_name ==# "Windows_NT"
  let g:flag = "good"
endif

if g:flag == "nogood"
  " Auto source .vimrc after saving
  augroup auto_source_vimrc
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
  augroup END
  let g:tex_comment_nospell = 1 " For vimtex use g:vimtex_syntax_nospell_comments
elseif g:flag == "good"
  " Auto source .vimrc and refresh vim-airline after saving
  augroup auto_source_vimrc_refresh_airline
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC | call airline#extensions#tabline#buffers#invalidate() | AirlineRefresh
  augroup END
endif

let g:config_files = [
      \ 'misc.vim',
      \ 'cursor.vim',
      \ 'spell.vim',
      \ 'colour.vim',
      \ 'clipboard.vim',
      \ 'buffer.vim',
      \ 'window.vim',
      \ 'python.vim',
      \ 'plug.vim',
      \ 'theme.vim',
      \ ]
" 'theme.vim' must come after 'plug.vim'

for s:fname in g:config_files
  execute printf('source ~/.vim/core/%s', s:fname)
endfor
